{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar reactSpring = require('react-spring');\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar defaultProperties = {\n  dark: {\n    circle: {\n      r: 9\n    },\n    mask: {\n      cx: '50%',\n      cy: '23%'\n    },\n    svg: {\n      transform: 'rotate(40deg)'\n    },\n    lines: {\n      opacity: 0\n    }\n  },\n  light: {\n    circle: {\n      r: 5\n    },\n    mask: {\n      cx: '100%',\n      cy: '0%'\n    },\n    svg: {\n      transform: 'rotate(90deg)'\n    },\n    lines: {\n      opacity: 1\n    }\n  },\n  springConfig: {\n    mass: 4,\n    tension: 250,\n    friction: 35\n  }\n};\nvar REACT_TOGGLE_DARK_MODE_GLOBAL_ID = 0;\n\nvar DarkModeSwitch = function DarkModeSwitch(_ref) {\n  var onChange = _ref.onChange,\n      _ref$checked = _ref.checked,\n      checked = _ref$checked === void 0 ? false : _ref$checked,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      _ref$animationPropert = _ref.animationProperties,\n      animationProperties = _ref$animationPropert === void 0 ? defaultProperties : _ref$animationPropert,\n      _ref$moonColor = _ref.moonColor,\n      moonColor = _ref$moonColor === void 0 ? 'white' : _ref$moonColor,\n      _ref$sunColor = _ref.sunColor,\n      sunColor = _ref$sunColor === void 0 ? 'black' : _ref$sunColor,\n      style = _ref.style,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onChange\", \"children\", \"checked\", \"size\", \"animationProperties\", \"moonColor\", \"sunColor\", \"style\"]);\n\n  var _React$useState = React.useState(0),\n      id = _React$useState[0],\n      setId = _React$useState[1];\n\n  React.useEffect(function () {\n    REACT_TOGGLE_DARK_MODE_GLOBAL_ID += 1;\n    setId(REACT_TOGGLE_DARK_MODE_GLOBAL_ID);\n  }, [setId]);\n  var properties = React.useMemo(function () {\n    if (animationProperties !== defaultProperties) {\n      return Object.assign(defaultProperties, animationProperties);\n    }\n\n    return animationProperties;\n  }, [animationProperties]);\n  var _properties = properties[checked ? 'dark' : 'light'],\n      circle = _properties.circle,\n      svg = _properties.svg,\n      lines = _properties.lines,\n      mask = _properties.mask;\n  var svgContainerProps = reactSpring.useSpring(_extends({}, svg, {\n    config: animationProperties.springConfig\n  }));\n  var centerCircleProps = reactSpring.useSpring(_extends({}, circle, {\n    config: animationProperties.springConfig\n  }));\n  var maskedCircleProps = reactSpring.useSpring(_extends({}, mask, {\n    config: animationProperties.springConfig\n  }));\n  var linesProps = reactSpring.useSpring(_extends({}, lines, {\n    config: animationProperties.springConfig\n  }));\n\n  var toggle = function toggle() {\n    return onChange(!checked);\n  };\n\n  var uniqueMaskId = \"circle-mask-\" + id;\n  return React.createElement(reactSpring.animated.svg, Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    color: checked ? moonColor : sunColor,\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    stroke: \"currentColor\",\n    onClick: toggle,\n    style: _extends({\n      cursor: 'pointer'\n    }, svgContainerProps, style)\n  }, rest), React.createElement(\"mask\", {\n    id: uniqueMaskId\n  }, React.createElement(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"white\"\n  }), React.createElement(reactSpring.animated.circle // @ts-ignore\n  , {\n    // @ts-ignore\n    style: maskedCircleProps,\n    r: \"9\",\n    fill: \"black\"\n  })), React.createElement(reactSpring.animated.circle, {\n    cx: \"12\",\n    cy: \"12\",\n    fill: checked ? moonColor : sunColor,\n    // @ts-ignore\n    style: centerCircleProps,\n    mask: \"url(#\" + uniqueMaskId + \")\"\n  }), React.createElement(reactSpring.animated.g, {\n    stroke: \"currentColor\",\n    style: linesProps\n  }, React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"1\",\n    x2: \"12\",\n    y2: \"3\"\n  }), React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"21\",\n    x2: \"12\",\n    y2: \"23\"\n  }), React.createElement(\"line\", {\n    x1: \"4.22\",\n    y1: \"4.22\",\n    x2: \"5.64\",\n    y2: \"5.64\"\n  }), React.createElement(\"line\", {\n    x1: \"18.36\",\n    y1: \"18.36\",\n    x2: \"19.78\",\n    y2: \"19.78\"\n  }), React.createElement(\"line\", {\n    x1: \"1\",\n    y1: \"12\",\n    x2: \"3\",\n    y2: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"21\",\n    y1: \"12\",\n    x2: \"23\",\n    y2: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"4.22\",\n    y1: \"19.78\",\n    x2: \"5.64\",\n    y2: \"18.36\"\n  }), React.createElement(\"line\", {\n    x1: \"18.36\",\n    y1: \"5.64\",\n    x2: \"19.78\",\n    y2: \"4.22\"\n  })));\n};\n\nexports.DarkModeSwitch = DarkModeSwitch;\nexports.defaultProperties = defaultProperties;","map":{"version":3,"mappings":"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","names":["defaultProperties","dark","circle","r","mask","cx","cy","svg","transform","lines","opacity","light","springConfig","mass","tension","friction","REACT_TOGGLE_DARK_MODE_GLOBAL_ID","DarkModeSwitch","onChange","checked","_ref$checked","size","_ref$size","animationProperties","moonColor","_ref$moonColor","sunColor","_ref$sunColor","style","rest","React","id","setId","properties","Object","assign","svgContainerProps","useSpring","_extends","config","centerCircleProps","maskedCircleProps","linesProps","toggle","uniqueMaskId","animated","xmlns","width","height","viewBox","color","fill","strokeWidth","strokeLinecap","strokeLinejoin","stroke","onClick","cursor","x","y","g","x1","y1","x2","y2"],"sources":["C:\\Users\\tarun\\Mern\\React\\learn-basics\\node_modules\\react-toggle-dark-mode\\src\\index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nexport const defaultProperties = {\n  dark: {\n    circle: {\n      r: 9,\n    },\n    mask: {\n      cx: '50%',\n      cy: '23%',\n    },\n    svg: {\n      transform: 'rotate(40deg)',\n    },\n    lines: {\n      opacity: 0,\n    },\n  },\n  light: {\n    circle: {\n      r: 5,\n    },\n    mask: {\n      cx: '100%',\n      cy: '0%',\n    },\n    svg: {\n      transform: 'rotate(90deg)',\n    },\n    lines: {\n      opacity: 1,\n    },\n  },\n  springConfig: { mass: 4, tension: 250, friction: 35 },\n};\n\nlet REACT_TOGGLE_DARK_MODE_GLOBAL_ID = 0;\n\ntype SVGProps = Omit<React.HTMLAttributes<HTMLOrSVGElement>, 'onChange'>;\nexport interface Props extends SVGProps {\n  onChange: (checked: boolean) => void;\n  checked: boolean;\n  style?: React.CSSProperties;\n  size?: number | string;\n  animationProperties?: typeof defaultProperties;\n  moonColor?: string;\n  sunColor?: string;\n}\n\nexport const DarkModeSwitch: React.FC<Props> = ({\n  onChange,\n  children,\n  checked = false,\n  size = 24,\n  animationProperties = defaultProperties,\n  moonColor = 'white',\n  sunColor = 'black',\n  style,\n  ...rest\n}) => {\n  const [id, setId] = React.useState(0);\n\n  React.useEffect(() => {\n    REACT_TOGGLE_DARK_MODE_GLOBAL_ID += 1;\n    setId(REACT_TOGGLE_DARK_MODE_GLOBAL_ID);\n  }, [setId]);\n\n  const properties = React.useMemo(() => {\n    if (animationProperties !== defaultProperties) {\n      return Object.assign(defaultProperties, animationProperties);\n    }\n\n    return animationProperties;\n  }, [animationProperties]);\n\n  const { circle, svg, lines, mask } = properties[checked ? 'dark' : 'light'];\n\n  const svgContainerProps = useSpring({\n    ...svg,\n    config: animationProperties.springConfig,\n  });\n  const centerCircleProps = useSpring({\n    ...circle,\n    config: animationProperties.springConfig,\n  });\n  const maskedCircleProps = useSpring({\n    ...mask,\n    config: animationProperties.springConfig,\n  });\n  const linesProps = useSpring({\n    ...lines,\n    config: animationProperties.springConfig,\n  });\n\n  const toggle = () => onChange(!checked);\n\n  const uniqueMaskId = `circle-mask-${id}`;\n\n  return (\n    <animated.svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      color={checked ? moonColor : sunColor}\n      fill=\"none\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      stroke=\"currentColor\"\n      onClick={toggle}\n      style={{\n        cursor: 'pointer',\n        ...svgContainerProps,\n        ...style,\n      }}\n      {...rest}\n    >\n      <mask id={uniqueMaskId}>\n        <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"white\" />\n        <animated.circle\n          // @ts-ignore\n          style={maskedCircleProps}\n          r=\"9\"\n          fill=\"black\"\n        />\n      </mask>\n\n      <animated.circle\n        cx=\"12\"\n        cy=\"12\"\n        fill={checked ? moonColor : sunColor}\n        // @ts-ignore\n        style={centerCircleProps}\n        mask={`url(#${uniqueMaskId})`}\n      />\n      <animated.g stroke=\"currentColor\" style={linesProps}>\n        <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\" />\n        <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\" />\n        <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\" />\n        <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\" />\n        <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\" />\n        <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\" />\n        <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\" />\n        <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\" />\n      </animated.g>\n    </animated.svg>\n  );\n};\n"]},"metadata":{},"sourceType":"script"}